/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author xyh10
 */
public class ViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPanel
     */
    Application application;
    DefaultTableModel model;
    Observation selectedObservation;
    
    
    public ViewPanel() {
        initComponents();
        fieldObservationID.setEditable(false);
    }
    
    public ViewPanel(Application application) {
        initComponents();
        this.application = application;
        model = (DefaultTableModel) viewTable.getModel();
        display();
        fieldObservationID.setEditable(false);
    }
    
        public boolean validateID(){
        String str = fieldObservationID.getText();
        
        if(str.trim().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter the ID!" );
            return false;
        }else if(!str.matches("[0-9]*")){
            JOptionPane.showMessageDialog(null,"Please enter a positive ID(consists of only digits)!" );
            return false;
        }else if(Integer.parseInt(str) < 0){
            JOptionPane.showMessageDialog(null,"ID should larger or equals than 0!" );
            return false;
        }   
        return true;
    }
    
    public boolean validateTemperature(){
        String str = fieldTemperature.getText();
        
        if(str.trim().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter the Temperature!" );
            return false;
        }else if(!str.matches("[0-9]*(.[0-9]*)?")){
            JOptionPane.showMessageDialog(null,"Please enter a valid number for Temperature!" );
            return false;
        }else if(Double.parseDouble(str) <= 0){
            JOptionPane.showMessageDialog(null,"Temperature should larger than 0!!" );
            return false;
        }   
        return true;
    }
    
    public boolean validateBloodPressure(){
        String str = fieldBloodPressure.getText();
        
        if(str.trim().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter the Blood Pressure!" );
            return false;
        }else if(!str.matches("[0-9]*(.[0-9]*)?")){
            JOptionPane.showMessageDialog(null,"Please enter a valid number for  Blood Pressure!" );
            return false;
        }else if(Double.parseDouble(str) <= 0){
            JOptionPane.showMessageDialog(null," Blood Pressure should larger than 0!!" );
            return false;
        }   
        return true;
    }
    
    public void display(){
//        
//        if(application.getHistory().getVitalSignHistory().size() == 0){
//            JOptionPane.showMessageDialog(null, t);
//        }
        model.setRowCount(0);
               
        for(Observation ob:application.getHistory().getVitalSignHistory()){
            Object[] row = new Object[3];
//            row[0] = ob.getObservationId();
            row[0] = ob;
            row[1] = ob.getBloodPressure();
            row[2] = ob.getTemperature();
//            Object[] row2 = {ob.getObservationId(), ob.getBloodPressure(),ob.getTemperature()};
            model.addRow(row);
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldObservationID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        fieldTemperature = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        updateObservation = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();
        viewBtn = new javax.swing.JButton();
        fieldBloodPressure = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        freshBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fieldObservationID.setEnabled(false);
        add(fieldObservationID, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 110, 30));

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Observation Id");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));
        add(fieldTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 110, 30));

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Temperature");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Blood Pressure");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, -1));

        updateObservation.setText("Update observation");
        updateObservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateObservationActionPerformed(evt);
            }
        });
        add(updateObservation, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, -1, -1));

        viewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Observation ID", "Blood Pressure", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, 380, 300));

        viewBtn.setText("View Details");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        add(viewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 440, -1, -1));
        add(fieldBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, 110, 30));

        jLabel4.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Detail observation information");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        freshBtn.setText("Fresh");
        freshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freshBtnActionPerformed(evt);
            }
        });
        add(freshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 440, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
//        display();
        int selectedRow = viewTable.getSelectedRow();
        
        if(selectedRow >= 0){
            selectedObservation = (Observation) model.getValueAt(selectedRow, 0);
            fieldObservationID.setText(selectedObservation.getObservationId() + "");
            fieldBloodPressure.setText(selectedObservation.getBloodPressure() + "");
            fieldTemperature.setText(selectedObservation.getTemperature() + "");
            
            
            
        }else{
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
        
        
    }//GEN-LAST:event_viewBtnActionPerformed

    private void updateObservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateObservationActionPerformed
        // TODO add your handling code here:
        // 1. use the find method
//        if(fieldObservationID.getText().isEmpty()){
//            JOptionPane.showMessageDialog(null, "Make a selection!");
//            return;
//        }
//        Observation ob = application.getHistory().findObservation(Integer.parseInt(fieldObservationID.getText()));
//        
//        if(ob == null){
//            JOptionPane.showMessageDialog(null, "Observation not found!");
//            return;
//        }else{
//            ob.setBloodPressure(Double.parseDouble(fieldObservationID.getText()));
//            ob.setTemperature(Double.parseDouble(fieldTemperature.getText()));
//        }
        
        // 2. use the selected one
        if(selectedObservation == null){
            JOptionPane.showMessageDialog(null, "Please select one row!");
            return;
        }
        
        if(!validateTemperature()) return ;
        if(!validateBloodPressure()) return ;
        
        
        selectedObservation.setBloodPressure(Double.parseDouble(fieldBloodPressure.getText()));
        selectedObservation.setTemperature(Double.parseDouble(fieldTemperature.getText()));
        
        JOptionPane.showMessageDialog(null, "Updated successfully");
        
    }//GEN-LAST:event_updateObservationActionPerformed

    private void freshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freshBtnActionPerformed
        // TODO add your handling code here:
        display();
    }//GEN-LAST:event_freshBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldBloodPressure;
    private javax.swing.JTextField fieldObservationID;
    private javax.swing.JTextField fieldTemperature;
    private javax.swing.JButton freshBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateObservation;
    private javax.swing.JButton viewBtn;
    private javax.swing.JTable viewTable;
    // End of variables declaration//GEN-END:variables
}
